using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Data.SqlClient;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Diagnostics;
using DevExpress.XtraBars.Customization.Helpers;
using DevExpress.XtraGrid;
using DevExpress.XtraGrid.Columns;
using DevExpress.XtraEditors.Controls;
using DevExpress.XtraEditors.Repository;
using DevExpress.XtraGrid.Views.Base;
using DevExpress.XtraGrid.Views.Grid;
using DevExpress.XtraGrid.Views.Grid.ViewInfo;
using DevExpress.Utils.Drawing;
using DevExpress.XtraEditors;


namespace ETravUpdater
{
    public partial class Form1 : DevExpress.XtraEditors.XtraForm
    {
        string xfile;
        string fn;
        string[] versioninfo;
        string FileNameof;
        String ConnStr = "Data Source=etrav-hack;Initial Catalog=Images;Persist Security Info=True;User ID=Application;Password=noitacilppa";
        public Assembly a;
        public string id;
        string version;
        string Locations = "Default Location";
        bool updateRequestNew = false;
        bool updateRequestOld = false;
        SimpleButton currentEditor;
        public bool dllbtn { get; private set; }
        public bool frf3btn { get; private set; }
        public bool inibtn { get; private set; }
        public bool xmlbtn { get; private set; }
        public int ProductBuildPart { get; }
        public bool frfbtn { get; private set; }

        public bool exebtn { get; private set; }

        public Form1()
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill a SqlDataSource
            sqlDataSource1.Fill();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill a SqlDataSource
            sqlDataSource1.Fill();
            timer1.Tick += new EventHandler(timer1_Tick);
            timer1.Interval = 500;
            timer1.Enabled = true;
            currentEditor = simpleButton1;
        }

        private void simpleButton1_Click(object sender, EventArgs e)
        {
            timer1.Stop();
            //progressBarControl1.Properties.Step = 1;
            //progressBarControl1.Properties.PercentView = true;
            //progressBarControl1.Properties.Maximum = xfile.Length;
            //progressBarControl1.Properties.Minimum = 0;
            

            DialogResult result = openFileDialog1.ShowDialog();
            if (result == DialogResult.OK) // Test result.
            {
                xfile = openFileDialog1.FileName;
                FileNameof = Path.GetFileName(xfile);
                fn = Path.GetFileNameWithoutExtension(xfile);

                //Test if valid assembly file(.exe or dll)
                if (exebtn == true || dllbtn == true)
                {
                    try
                    {
                        System.Reflection.AssemblyName testAssembly =
                        System.Reflection.AssemblyName.GetAssemblyName(xfile);
                        var assembly = a = Assembly.LoadFile(xfile);  //typeof(Program).Assembly;
                        var attribute = (GuidAttribute)assembly.GetCustomAttributes(typeof(GuidAttribute), true)[0];
                        id = attribute.Value;
                        FileVersionInfo fvi = FileVersionInfo.GetVersionInfo(assembly.Location);
                        version = fvi.FileVersion;
                        versioninfo = fvi.FileVersion.Split('_');
                        Version v;
                        if (versioninfo.Length > 1 && Version.TryParse(versioninfo.Last(), out v))
                        {
                            Console.Write("Major:{0}, Minor:{1}", v.Major, v.Minor);
                        }
                        databaseFileRead(id, version);

                        if (updateRequestNew == true)
                        {
                            timer1.Start();
                            progressBarControl1.Visible = true;
                            databaseFileupdate(xfile, version);
                            progressBarControl1.Visible = false;
                            return;
                        }
                        if (updateRequestNew != true || updateRequestOld != true)
                        {
                            timer1.Start();
                            progressBarControl1.Visible = true;
                            databaseFilePut(xfile);
                            progressBarControl1.Visible = false;
                            return;
                        }

                    }
                    catch (System.IO.FileNotFoundException)
                    {
                        System.Console.WriteLine("The file cannot be found.");
                        MessageBox.Show("The file cannot be found.");
                        timer1.Stop();
                        return;
                    }
                    catch (System.IO.FileLoadException)
                    {
                        System.Console.WriteLine("The assembly has already been loaded.");
                        MessageBox.Show("The assembly has already been loaded.");
                        timer1.Stop();
                        return;
                    }
                    catch (System.BadImageFormatException)
                    {
                        System.Console.WriteLine("The file is not an assembly.");
                        MessageBox.Show("The file selected is not an exe or dll");
                        timer1.Stop();
                        return;
                    }
                    catch (System.IndexOutOfRangeException)
                    {
                        System.Console.WriteLine("The file is not an assembly.");
                        MessageBox.Show("The file selected is not an exe or dll");
                        timer1.Stop();
                        return;
                    }




                }
                //Test if valid non-assembly file(frf,frf3,ini or xml)
                if (frfbtn == true || frf3btn == true || inibtn == true || xmlbtn == true)
                {
                    try
                    {
                        System.Reflection.AssemblyName testAssembly =
                        System.Reflection.AssemblyName.GetAssemblyName(xfile);
                        System.Console.WriteLine("The files an active application, Try selecting .EXE");
                        MessageBox.Show("The files an active application, Try selecting .EXE");
                        timer1.Stop();
                        return;
                    }
                    catch (System.IO.FileNotFoundException)
                    {
                        System.Console.WriteLine("The file cannot be found.");
                        MessageBox.Show("The file cannot be found.");
                        timer1.Stop();
                        return;
                    }
                    catch (System.IO.FileLoadException)
                    {
                        System.Console.WriteLine("The assembly has already been loaded.");
                        MessageBox.Show("The assembly has already been loaded.");
                        timer1.Stop();
                        return;
                    }
                    catch (System.BadImageFormatException)
                    {
                        System.Console.WriteLine("The file is not an assembly.");
                        //prepare file 
                        try
                        {
                            FileVersionInfo myFileVersionInfo = FileVersionInfo.GetVersionInfo(Environment.SystemDirectory + xfile);
                            version = myFileVersionInfo.FileVersion;
                            id = myFileVersionInfo.ProductBuildPart.ToString();
                            databaseFileRead(id, version);
                            if (updateRequestNew == true || updateRequestOld == true)
                            {
                                timer1.Start();
                                databaseFileupdate(xfile, version);
                            }
                            if (updateRequestNew != true || updateRequestOld != true)
                            {
                                timer1.Start();
                                version = "0000";
                                databaseFilePut(xfile);
                            }
                            return;
                        }
                        catch (NotSupportedException)
                        {
                            timer1.Start();
                            version = "0000";
                            databaseFilePut(xfile);
                        }
                    }
                    

                }

            }
            Console.WriteLine(result); // <-- For debugging use.
        }

        public  void databaseFilePut(string varFilePath) //Puts any file on VSserver!
        {
            progressBarControl1.Properties.Step = 1;
            progressBarControl1.Properties.PercentView = true;
            progressBarControl1.Properties.Minimum = 0;
            byte[] file;
            using (var stream = new FileStream(varFilePath, FileMode.Open, FileAccess.Read))
            {
                using (var reader = new BinaryReader(stream))
                {
                    file = reader.ReadBytes((int)stream.Length);
                }
            }
            using (SqlConnection SqlConn = new SqlConnection(ConnStr))
            using (SqlCommand command = SqlConn.CreateCommand())
            {
                if (version == null) { version = "getdate()"; }
                command.CommandText = "INSERT INTO tblVSapplications (VSApplication, FileVersion, DefaultLocation, FileDate, Applicationguid, Applicationname) VALUES (@binapp, @versioninfo, " + "'" + Locations + "'" + ",getdate()," + "'" + id + "'," + "'" + FileNameof + "')";
                //command.CommandText = "UPDATE tblVSapplications SET VSApplication=@binapp, FileVersion=@versioninfo, DefaultLocation= " + "'" + Locations + "'" + ",FileDate=getdate(), Applicationguid=" + "'" + id + "'" + ",Applicationname=" + "'" + FileNameof + "'";
                command.Parameters.AddWithValue("@binapp", file);
                command.Parameters.AddWithValue("@versioninfo", version);

                try
                {
                    SqlConn.Open();

                    command.ExecuteNonQuery();

                    SqlConn.Close();
                    // This line of code is generated by Data Source Configuration Wizard
                    // Fill a SqlDataSource
                    sqlDataSource1.Fill();
                    // This line of code is generated by Data Source Configuration Wizard
                    // Fill a SqlDataSource
                    sqlDataSource1.Fill();
                    timer1.Stop();
                    hyperlinkLabelControl1.Text = "Added to VS Database: " + xfile + version + " Succses!";
                }
                catch (Exception)
                {

                    throw;
                }
                //finally { }
               
            }
        }

        public void databaseFileupdate(string varFilePath,string version) //Updates any file on server!
        {
            progressBarControl1.Properties.Step = 1;
            progressBarControl1.Properties.PercentView = true;
            progressBarControl1.Properties.Minimum = 0;
            if (varFilePath == null) { return; }
            byte[] file;
            
            using (var stream = new FileStream(varFilePath, FileMode.Open, FileAccess.Read))
            {
                using (var reader = new BinaryReader(stream))
                {
                    file = reader.ReadBytes((int)stream.Length);
                    progressBarControl1.Properties.Maximum = file.Length;
                    progressBarControl1.PerformStep();
                    progressBarControl1.Update();
                }
            }
            using (SqlConnection SqlConn = new SqlConnection(ConnStr))
            using (SqlCommand command = SqlConn.CreateCommand())
            {
                if (updateRequestNew == false) { command.CommandText = "INSERT INTO tblVSapplications (VSApplication, FileVersion, DefaultLocation, FileDate, Applicationguid, Applicationname) VALUES (@binapp, @versioninfo, " + "'" + Locations + "'" + ",getdate()," + "'" + id + "'," + "'" + FileNameof + "')"; hyperlinkLabelControl1.Text = "Updating VS Database with: " + xfile + version; }
                if (updateRequestNew == true){ command.CommandText = "UPDATE tblVSapplications SET VSApplication=@binapp, FileVersion=@versioninfo,FileDate=getdate() WHERE Applicationname=" + "'" + FileNameof + "'"; }
                command.Parameters.AddWithValue("@binapp", file);
                command.Parameters.AddWithValue("@versioninfo", version);

                try
                {
                    SqlConn.Open();

                    command.ExecuteNonQuery();

                    SqlConn.Close();
                    // This line of code is generated by Data Source Configuration Wizard
                    // Fill a SqlDataSource
                    sqlDataSource1.Fill();
                    hyperlinkLabelControl1.Text = "Updating VS Database  with: " + xfile + version + " Succses!";
                    timer1.Stop();

                }
                catch (Exception)
                {

                    throw;
                }
                
            }
        }

        public void databaseFileRead(string varID, string version) //Just reads file on server for comparison
        {
            SqlConnection SqlConn = new SqlConnection(ConnStr);
            SqlConn.Open();
            SqlDataAdapter sda = new SqlDataAdapter("SELECT COUNT(*) FROM tblVSapplications WHERE FileVersion='" + version + "' and Applicationname='" + FileNameof + "'", SqlConn);
            SqlDataAdapter sda2 = new SqlDataAdapter("SELECT COUNT(*) FROM tblapplications WHERE Applicationname='" + FileNameof + "' and Version='" + version + "'", SqlConn);
            DataTable dt = new DataTable();
            DataTable dt2 = new DataTable();
            sda.Fill(dt);
            sda2.Fill(dt2);

            if (dt.Rows[0][0].ToString() == "1")
            {
                updateRequestNew = true;

            }
            else
            {
                updateRequestNew = false;
            }


            //Old database will always be true to update. Nothing new goes here. This can be changed.
           
            if (dt2.Rows[0][0].ToString() == "1")
            {
                updateRequestOld = true;

            }
            else
            {
                updateRequestOld = true; //<---change if you want to place new apps on this table.
            }
        }

        public MemoryStream databaseFileRead(string varID) //Use to move one set of data from a database to another database.
        {
            MemoryStream memoryStream = new MemoryStream();
            using (SqlConnection SqlConn = new SqlConnection(ConnStr))
            using (SqlCommand command = SqlConn.CreateCommand())
            {
                command.CommandText = @"SELECT [Application] FROM tblapplications WHERE [RaportID] = @varID";
                command.Parameters.AddWithValue("@varID", varID);
                using (var sqlQueryResult = command.ExecuteReader())
                    if (sqlQueryResult != null)
                    {
                        sqlQueryResult.Read();
                        var blob = new Byte[(sqlQueryResult.GetBytes(0, 0, null, 0, int.MaxValue))];
                        sqlQueryResult.GetBytes(0, 0, blob, 0, blob.Length);
                        //using (var fs = new MemoryStream(memoryStream, FileMode.Create, FileAccess.Write)) {
                        memoryStream.Write(blob, 0, blob.Length);
                        //}
                    }
            }
            return memoryStream;
        }

        public int databaseFilePut(MemoryStream fileToPut)
        {
            int varID = 0;
            byte[] file = fileToPut.ToArray();
            const string preparedCommand = @"
                    INSERT INTO tblapplications
                               ([RaportPlik])
                         VALUES
                               (@File)
                        SELECT [RaportID] FROM [dbo].[Raporty]
            WHERE [RaportID] = SCOPE_IDENTITY()
                    ";
            using (SqlConnection SqlConn = new SqlConnection(ConnStr))
            using (SqlCommand command = SqlConn.CreateCommand())
            {
                command.Parameters.Add("@File", SqlDbType.VarBinary, file.Length).Value = file;

                using (var sqlWriteQuery = command.ExecuteReader())
                    while (sqlWriteQuery != null && sqlWriteQuery.Read())
                    {
                        varID = sqlWriteQuery["RaportID"] is int ? (int)sqlWriteQuery["RaportID"] : 0;
                    }
            }
            return varID;
        }

        private void dropDownButton1_Click(object sender, EventArgs e)
        {

        }

        private void dropDownButton2_Click(object sender, EventArgs e)
        {

        }

       

        private void simpleButton3_Click(object sender, EventArgs e)
        {
            // This line of code is generated by Data Source Configuration Wizard
            // Fill a SqlDataSource
            sqlDataSource1.Fill();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill a SqlDataSource
            sqlDataSource1.Fill();

        }

        private void checkButton1_CheckedChanged(object sender, EventArgs e) //exe
        {
            
            if (checkButton1.Checked)
            {
                checkButton1.Appearance.BackColor = Color.LightGreen;
                checkButton1.Appearance.BackColor2 = Color.DarkGreen;
                checkButton2.Checked=false;
                checkButton3.Checked = false;
                checkButton4.Checked = false;
                checkButton5.Checked = false;
                checkButton6.Checked = false;
                exebtn = true;
            }
            else
            {
                checkButton1.Appearance.BackColor = Color.LightBlue;
                checkButton1.Appearance.BackColor2 = Color.DarkBlue;
            }
        }

        private void checkButton2_CheckedChanged(object sender, EventArgs e) //dll
        {
            if (checkButton2.Checked)
            {
                checkButton2.Appearance.BackColor = Color.LightGreen;
                checkButton2.Appearance.BackColor2 = Color.DarkGreen;
                checkButton1.Checked = false;
                checkButton3.Checked = false;
                checkButton4.Checked = false;
                checkButton5.Checked = false;
                checkButton6.Checked = false;
                dllbtn = true;
            }
            else
            {
                checkButton2.Appearance.BackColor = Color.LightBlue;
                checkButton2.Appearance.BackColor2 = Color.DarkBlue;
            }
        }

        private void checkButton3_CheckedChanged(object sender, EventArgs e)
        {
            if (checkButton3.Checked)
            {
                checkButton3.Appearance.BackColor = Color.LightGreen;
                checkButton3.Appearance.BackColor2 = Color.DarkGreen;
                checkButton2.Checked = false;
                checkButton1.Checked = false;
                checkButton4.Checked = false;
                checkButton5.Checked = false;
                checkButton6.Checked = false;
                frfbtn = true;
            }
            else
            {
                checkButton3.Appearance.BackColor = Color.LightBlue;
                checkButton3.Appearance.BackColor2 = Color.DarkBlue;
            }
        }

        private void checkButton4_CheckedChanged(object sender, EventArgs e)
        {
            if (checkButton4.Checked)
            {
                checkButton4.Appearance.BackColor = Color.LightGreen;
                checkButton4.Appearance.BackColor2 = Color.DarkGreen;
                checkButton2.Checked = false;
                checkButton3.Checked = false;
                checkButton1.Checked = false;
                checkButton5.Checked = false;
                checkButton6.Checked = false;
                frf3btn = true;
            }
            else
            {
                checkButton4.Appearance.BackColor = Color.LightBlue;
                checkButton4.Appearance.BackColor2 = Color.DarkBlue;
            }
        }

        private void checkButton5_CheckedChanged(object sender, EventArgs e)
        {
            if (checkButton5.Checked)
            {
                checkButton5.Appearance.BackColor = Color.LightGreen;
                checkButton5.Appearance.BackColor2 = Color.DarkGreen;
                checkButton2.Checked = false;
                checkButton3.Checked = false;
                checkButton4.Checked = false;
                checkButton1.Checked = false;
                checkButton6.Checked = false;
                inibtn = true;
            }
            else
            {
                checkButton5.Appearance.BackColor = Color.LightBlue;
                checkButton5.Appearance.BackColor2 = Color.DarkBlue;
            }
        }

        private void checkButton6_CheckedChanged(object sender, EventArgs e)
        {
            if (checkButton6.Checked)
            {
                checkButton6.Appearance.BackColor = Color.LightGreen;
                checkButton6.Appearance.BackColor2 = Color.DarkGreen;
                checkButton2.Checked = false;
                checkButton3.Checked = false;
                checkButton4.Checked = false;
                checkButton5.Checked = false;
                checkButton1.Checked = false;
                xmlbtn = true;
            }
            else
            {
                checkButton6.Appearance.BackColor = Color.LightBlue;
                checkButton6.Appearance.BackColor2 = Color.DarkBlue;
            }
        }

        private void SetControlBackColor(Color color)
        {
            if (currentEditor is SimpleButton)
            {
                ((SimpleButton)currentEditor).Appearance.BackColor = color;
                ((SimpleButton)currentEditor).Refresh();
            }
        }

        private void timer1_Tick(object sender, EventArgs e)
        {
            
            if (simpleButton1.Appearance.BackColor == Color.DarkBlue)
            {
                SetControlBackColor(Color.LightBlue);
            }
            else
            {
                SetControlBackColor(Color.DarkBlue);
            }
        }

        private void simpleButton2_Click(object sender, EventArgs e)
        {
            databaseFileupdate(xfile, version);
        }

        private void simpleButton4_Click(object sender, EventArgs e) //fix gridselection code.
        {
            hyperlinkLabelControl1.Text = "";
            if (txtAppdelete.Text == "")
            {
                MessageBox.Show("please Select or type in application name along with its version in the File Version box");
                hyperlinkLabelControl1.Text = "please Select or type in application name along with its version in the File Version box";
                return;
            }
            if (txtFileVerDeleete.Text == "")
            {
                MessageBox.Show("please Select or type in application name along with its version in the File Version box");
                hyperlinkLabelControl1.Text = "please Select or type in application name along with its version in the File Version box";
                return;
            }
            string a = txtAppdelete.Text.ToString();
            string b = txtFileVerDeleete.Text.ToString();
            SqlConnection SqlConn = new SqlConnection(ConnStr);
            SqlConn.Open();
            string sql = "DELETE FROM tblapplications WHERE ApplicationName=" + "'" + a + "'" + "and Version=" + "'" + b + "'" ;
            SqlCommand cmd = new SqlCommand(sql, SqlConn);
            string sql2 = "DELETE FROM tblVSapplications WHERE ApplicationName=" + "'" + a + "'" + "and FileVersion=" + "'" + b + "'" ;
            SqlCommand cmd2 = new SqlCommand(sql2, SqlConn);
            cmd.ExecuteNonQuery();
            cmd2.ExecuteNonQuery();
            SqlConn.Close();
            hyperlinkLabelControl1.Text = "Application: " + a + " File Version: " + b + " Has been Deleted";

            // This line of code is generated by Data Source Configuration Wizard
            // Fill a SqlDataSource
            sqlDataSource1.Fill();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill a SqlDataSource
            sqlDataSource1.Fill();
        }

       private void gridControl1_Click(object sender, EventArgs e)
        {
 
        }

        private void simpleButton5_Click(object sender, EventArgs e)//
        {
            hyperlinkLabelControl1.Text = "";
            if (txtAppdelete.Text == "")
            {
                MessageBox.Show("please Select or type in application name along with its version in the File Version box");
                hyperlinkLabelControl1.Text = "please Select or type in application name along with its version in the File Version box";
                return;
            }
            if (txtFileVerDeleete.Text == "")
            {
                MessageBox.Show("please Select or type in application name along with its version in the File Version box");
                hyperlinkLabelControl1.Text = "please Select or type in application name along with its version in the File Version box";
                return;
            }
            string a = txtAppMoveN.Text.ToString();
            string b = txtAppMoveV.Text.ToString();
            SqlConnection SqlConn = new SqlConnection(ConnStr);
            SqlConn.Open();
            string sql = "DELETE FROM tblapplications WHERE ApplicationName=" + "'" + a + "'" + "and Version=" + "'" + b + "'";
            string sql3 = "DELETE FROM tblapplications WHERE ApplicationName=" + "'" + a + "'" + "and Version=" + "'" + b + "'";

            SqlCommand cmd = new SqlCommand(sql, SqlConn);
            string sql2 = "DELETE FROM tblVSapplications WHERE ApplicationName=" + "'" + a + "'" + "and FileVersion=" + "'" + b + "'";
            SqlCommand cmd2 = new SqlCommand(sql2, SqlConn);
            cmd.ExecuteNonQuery();
            cmd2.ExecuteNonQuery();
            SqlConn.Close();
            hyperlinkLabelControl1.Text = "Application: " + a + " File Version: " + b + " Has been Deleted";

            // This line of code is generated by Data Source Configuration Wizard
            // Fill a SqlDataSource
            sqlDataSource1.Fill();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill a SqlDataSource
            sqlDataSource1.Fill();
        }
    }
}
